assemblyfile = { SOI ~ assembly_line* ~ EOI }
assembly_line = _{ preprocess_line | empty_line | comment_line | instruct_line | label_line}
empty_line = _{whitespace* ~ newline}
comment_line = _{ whitespace* ~comment~newline}
instruct_line = { whitespace* ~instruct~(whitespace~comment)?~newline }
label_line = {whitespace* ~ label ~ newline }
preprocess_line = { whitespace* ~ label_call ~ (whitespace* ~ any_charactere)* ~ newline}
instruct = {opcode ~ whitespace ~ operande ~ (whitespace* ~ operande_separator ~ whitespace* ~ operande)* ~ whitespace*}
opcode={conditional_opcode | normal_opcode}
conditional_opcode = {conditional_prefix~(!whitespace ~ string_key)*}
normal_opcode = {(!whitespace ~ string_key)}
operande={term | expression | label_call}
term = { register | immediate }
register={"r"~digit | "sp"}
label={(!whitespace ~ string_key)* ~ ":"}
comment = _{ at ~ (!newline ~ ANY)*}
immediate = {sharp ~ signed_digits}
expression={"["~term ~ (whitespace* ~ operande_separator ~ whitespace* ~ term)*~"]"}
label_call = { "." ~ label_name}
label_name = { string_key ~ ("_" ~ string_key)* }
any_charactere= {char_key | "\"" | "%" | "-" | "/" | "\\" | "_" | "," | "(" | ")"}
newline=_{"\n\r" | "\n" | "\r"}
at = _{"@"}
sharp = _{"#"}
operande_separator=_{","}
char_key = { ASCII_ALPHANUMERIC | "." | "/" | "-" }
string_key = @{ any_charactere+ }
signed_digits = {sign? ~ digits}
digits ={ASCII_DIGIT*}
digit ={ASCII_DIGIT}
whitespace=_{SPACE_SEPARATOR | "\t"}
sign = {"-"}
conditional_prefix={"b"}